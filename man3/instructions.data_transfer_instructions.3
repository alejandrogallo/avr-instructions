.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "Data Transfer Instructions \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instruction mnemonics
.SS Data Transfer Instructions
.PP
.TS
tab(@);
l l l l l l.
T{
 \f[B]Mnemonic\f[]
T}@T{
 \f[B]Operands\f[]
T}@T{
 \f[B]Description\f[]
T}@T{
 \f[B]Operation\f[]
T}@T{
 \f[B]Flags\f[]
T}@T{
 \f[B]Cycles\f[]
T}
_
T{
.PP
MOV (avrassembler.wb_MOV.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Copy register
T}@T{
Rd = Rr
T}@T{
None
T}@T{
1
T}
T{
.PP
MOVW (avrassembler.wb_MOVW.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Copy register pair
T}@T{
Rd+1:Rd = Rr+1:Rr, r,d even
T}@T{
None
T}@T{
1
T}
T{
.PP
LDI (avrassembler.wb_LDI.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
K8 (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_K8)
T}@T{
Load Immediate
T}@T{
Rd = K
T}@T{
None
T}@T{
1
T}
T{
.PP
LDS (avrassembler.wb_LDS.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
k (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_k)
T}@T{
Load Direct
T}@T{
Rd = (k)
T}@T{
None
T}@T{
2*
T}
T{
.PP
LD (avrassembler.wb_LD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load Indirect
T}@T{
Rd = (X)
T}@T{
None
T}@T{
2*
T}
T{
.PP
LD (avrassembler.wb_LD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load Indirect and Post\-Increment
T}@T{
Rd = (X), X=X+1
T}@T{
None
T}@T{
2*
T}
T{
.PP
LD (avrassembler.wb_LD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load Indirect and Pre\-Decrement
T}@T{
X=X\-1, Rd = (X)
T}@T{
None
T}@T{
2*
T}
T{
.PP
LD (avrassembler.wb_LD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load Indirect
T}@T{
Rd = (Y)
T}@T{
None
T}@T{
2*
T}
T{
.PP
LD (avrassembler.wb_LD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load Indirect and Post\-Increment
T}@T{
Rd = (Y), Y=Y+1
T}@T{
None
T}@T{
2*
T}
T{
.PP
LD (avrassembler.wb_LD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load Indirect and Pre\-Decrement
T}@T{
Y=Y\-1, Rd = (Y)
T}@T{
None
T}@T{
2*
T}
T{
.PP
LD (avrassembler.wb_LDD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
+
q (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_q)
T}@T{
Load Indirect with displacement
T}@T{
Rd = (Y+q)
T}@T{
None
T}@T{
2*
T}
T{
.PP
LD (avrassembler.wb_LD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load Indirect
T}@T{
Rd = (Z)
T}@T{
None
T}@T{
2*
T}
T{
.PP
LD (avrassembler.wb_LD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load Indirect and Post\-Increment
T}@T{
Rd = (Z), Z=Z+1
T}@T{
None
T}@T{
2*
T}
T{
.PP
LD (avrassembler.wb_LD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load Indirect and Pre\-Decrement
T}@T{
Z=Z\-1, Rd = (Z)
T}@T{
None
T}@T{
2*
T}
T{
.PP
LAC (avrassembler.wb_LAC.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load and Clear
T}@T{
Z = Rd •($FF\-Z)
T}@T{
None
T}@T{
2
T}
T{
.PP
LAT (avrassembler.wb_LAT.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load and Toggle
T}@T{
Z = Rd ⊕ (Z)
T}@T{
None
T}@T{
2
T}
T{
.PP
LAS (avrassembler.wb_LAS.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load and Set
T}@T{
Z = Rd v (Z)
T}@T{
None
T}@T{
2
T}
T{
.PP
XCH (avrassembler.wb_XCH.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Exchange
T}@T{
Z = Rd, Rd = Z
T}@T{
None
T}@T{
2
T}
T{
.PP
LD (avrassembler.wb_LDD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
+
q (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_q)
T}@T{
Load Indirect with displacement
T}@T{
Rd = (Z+q)
T}@T{
None
T}@T{
2*
T}
T{
.PP
STS (avrassembler.wb_STS.html)
T}@T{
.PP
>k,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Direct
T}@T{
(k) = Rr
T}@T{
None
T}@T{
2*
T}
T{
.PP
ST (avrassembler.wb_ST.html)
T}@T{
.PP
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Indirect
T}@T{
(X) = Rr
T}@T{
None
T}@T{
2*
T}
T{
.PP
ST (avrassembler.wb_ST.html)
T}@T{
.PP
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Indirect and Post\-Increment
T}@T{
(X) = Rr, X=X+1
T}@T{
None
T}@T{
2*
T}
T{
.PP
ST (avrassembler.wb_ST.html)
T}@T{
.PP
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Indirect and Pre\-Decrement
T}@T{
X=X\-1, (X)=Rr
T}@T{
None
T}@T{
2*
T}
T{
.PP
ST (avrassembler.wb_ST.html)
T}@T{
.PP
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Indirect
T}@T{
(Y) = Rr
T}@T{
None
T}@T{
2*
T}
T{
.PP
ST (avrassembler.wb_ST.html)
T}@T{
.PP
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Indirect and Post\-Increment
T}@T{
(Y) = Rr, Y=Y+1
T}@T{
None
T}@T{
2
T}
T{
.PP
ST (avrassembler.wb_ST.html)
T}@T{
.PP
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Indirect and Pre\-Decrement
T}@T{
Y=Y\-1, (Y) = Rr
T}@T{
None
T}@T{
2
T}
T{
.PP
ST (avrassembler.wb_ST.html)
T}@T{
.PP
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
+
q (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_q)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Indirect with displacement
T}@T{
(Y+q) = Rr
T}@T{
None
T}@T{
2
T}
T{
.PP
ST (avrassembler.wb_ST.html)
T}@T{
.PP
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Indirect
T}@T{
(Z) = Rr
T}@T{
None
T}@T{
2
T}
T{
.PP
ST (avrassembler.wb_ST.html)
T}@T{
.PP
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Indirect and Post\-Increment
T}@T{
(Z) = Rr, Z=Z+1
T}@T{
None
T}@T{
2
T}
T{
.PP
ST (avrassembler.wb_ST.html)
T}@T{
.PP
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Indirect and Pre\-Decrement
T}@T{
Z=Z\-1, (Z) = Rr
T}@T{
None
T}@T{
2
T}
T{
.PP
ST (avrassembler.wb_ST.html)
T}@T{
.PP
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
+
q (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_q)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Store Indirect with displacement
T}@T{
(Z+q) = Rr
T}@T{
None
T}@T{
2
T}
T{
.PP
LPM (avrassembler.wb_LPM.html)
T}@T{
None
T}@T{
Load Program Memory
T}@T{
.PP
R0 = (
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
)
T}@T{
None
T}@T{
3
T}
T{
.PP
LPM (avrassembler.wb_LPM.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load Program Memory
T}@T{
.PP
Rd = (
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
)
T}@T{
None
T}@T{
3
T}
T{
.PP
LPM (avrassembler.wb_LPM.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Load Program Memory and Post\-Increment
T}@T{
.PP
Rd = (
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
), Z=Z+1
T}@T{
None
T}@T{
3
T}
T{
.PP
ELPM (avrassembler.wb_ELPM.html)
T}@T{
None
T}@T{
Extended Load Program Memory
T}@T{
.PP
R0 = (RAMPZ:
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
)
T}@T{
None
T}@T{
3
T}
T{
.PP
ELPM (avrassembler.wb_ELPM.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Extended Load Program Memory
T}@T{
Rd = (RAMPZ:
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
)
T}@T{
None
T}@T{
3
T}
T{
.PP
ELPM (avrassembler.wb_ELPM.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
T}@T{
Extended Load Program Memory and Post Increment
T}@T{
.PP
Rd = (RAMPZ:
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
), Z = Z+1
T}@T{
None
T}@T{
3
T}
T{
.PP
SPM (avrassembler.wb_SPM.html)
T}@T{
None
T}@T{
Store Program Memory
T}@T{
.PP
(
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
) = R1:R0
T}@T{
None
T}@T{
\-
T}
T{
ESPM
T}@T{
None
T}@T{
Extended Store Program Memory
T}@T{
.PP
(RAMPZ:
X,Y,Z (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_X_Y_Z)
) = R1:R0
T}@T{
None
T}@T{
\-
T}
T{
.PP
IN (avrassembler.wb_IN.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
P (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_P)
T}@T{
In Port
T}@T{
Rd = P
T}@T{
None
T}@T{
1
T}
T{
.PP
OUT (avrassembler.wb_OUT.html)
T}@T{
.PP
P (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_P)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Out Port
T}@T{
P = Rr
T}@T{
None
T}@T{
1
T}
T{
.PP
PUSH (avrassembler.wb_PUSH.html)
T}@T{
.PP
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Push register on Stack
T}@T{
STACK = Rr
T}@T{
None
T}@T{
2
T}
T{
.PP
POP (avrassembler.wb_POP.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
T}@T{
Pop register from Stack
T}@T{
Rd = STACK
T}@T{
None
T}@T{
2
T}
.TE
