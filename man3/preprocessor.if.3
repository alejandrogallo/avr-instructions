.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "#if and #elif \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler AVR Assembler Preprocessor
.SS #if and #elif
.SS  () Syntax
.PP
\f[C]\ \ \ \ \ \ \ #if\ condition\ \ \ \ \ \ \f[]
.PP
\f[C]\ \ \ \ \ \ \ #elif\ condition\ \ \ \ \ \ \f[]
.SS  () Description
.PP
All following lines until the corresponding
\f[C]\ \ \ \ \ \ \ #endif\ \ \ \ \ \ \f[] ,
\f[C]\ \ \ \ \ \ \ #else\ \ \ \ \ \ \f[] , or
\f[C]\ \ \ \ \ \ \ #elif\ \ \ \ \ \ \f[] are conditionally assembled if
condition is true (not equal to 0).
condition may be any integer expression, including preprocessor macros
which are expanded.
 \f[I]The preprocessor recognizes the special operator defined(name)that
returns 1 if name is \f[C]\ \ \ \ \ \ \ \ \ #define\ \ \ \ \ \ \ \ \f[]
d and 0 otherwise. Any un
\f[C]\ \ \ \ \ \ \ \ \ #define\ \ \ \ \ \ \ \ \f[] d symbols used in
condition are silently evaluated to 0.\f[]
.PP
Conditionals may be nested to arbitrary depth.
.PP
\f[C]\ \ \ \ \ \ \ #elif\ \ \ \ \ \ \f[] evaluates condition in the same
manner as \f[C]\ \ \ \ \ \ \ #if\ \ \ \ \ \ \f[] , except that it is
only evaluated if no previous branch of a compound
\f[C]\ \ \ \ \ \ \ #if\ \&...\ #elif\ \ \ \ \ \ \f[] sequence has been
evaluated to true.
.SS  () Examples
.PP
.IP
.nf
\f[C]
#if\ 0\ 
//\ code\ here\ is\ never\ included\ 
#endif

#if\ defined(__ATmega48__)\ ||\ defined(__ATmega88__)\ 
//\ code\ specific\ for\ these\ devices\ 
#elif\ defined\ (__ATmega169__)\ 
//\ code\ specific\ for\ ATmega169\ 
#endif\ //\ device\ specific\ code
\f[]
.fi
.PP
