.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "LDS \- Load Direct from SRAM \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS  ()  () LDS \- Load Direct from SRAM
.PP
This 1\-word form of the LDS instruction is only used on ATtiny10\-based
devices.
Other AVR devices use the LDS (avrassembler.wb_LDS.html) .
.SS Description:
.PP
Loads one byte from the SRAM section of the data space to a register.
.PP
An 8\-bit address in the range 0x40 <= k <= 0xBF must be supplied.
The assembler will calculate an 7\-bit offset into the SRAM memory from
this address, hence this instruction is capable of addressing up to 128
bytes of SRAM.
This instruction cannot be used to load I/O addresses, use the
IN (avrassembler.wb_IN.html) instruction for this purpose.
.PP
Operation:
.PP
(i)Rd ← (k)
.PP
Syntax: Operands: Program Counter:
.PP
(i)LDS Rd,k 16 ≤ d ≤ 31, 0x40 ≤ k ≤ 0xBF PC ← PC + 1
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
1010
T}@T{
.PP
0kkk
T}@T{
.PP
dddd
T}@T{
.PP
kkkk
T}
.TE
.SS Status Register (SREG) and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}
.TE
.PP
Example:
.IP
.nf
\f[C]
lds\ r2,$40\ ;\ Load\ r2\ with\ the\ contents\ of\ data\ space\ location\ $FF00
add\ r2,r1\ ;\ add\ r1\ to\ r2
sts\ $40,r2\ ;\ Write\ back
\f[]
.fi
.PP
.PP
Words:1 (2 bytes)
.PP
Cycles:1
