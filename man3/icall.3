.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "ICALL \- Indirect Call to Subroutine \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS ICALL \- Indirect Call to Subroutine
.SS  () Description:
.PP
Indirect call of a subroutine pointed to by the Z (16 bits) pointer
register in the register file.
The Z pointer register is 16 bits wide and allows call to a subroutine
within the lowest 64K words (128K bytes) section in the program memory
space.
The stack pointer uses a post\-decrement scheme during ICALL.
.PP
This instruction is not available in all devices.
Refer to the device specific instruction set summary.
.PP
Operation:
.PP
(i) PC(15:0) ← Z(15:0)Devices with 16 bits PC, 128K bytes program memory
maximum.
.PP
(ii) PC(15:0) ← Z(15:0)Devices with 22 bits PC, 8M bytes program memory
maximum.
.PP
PC(21:16) ← 0
.PP
Syntax: Operands: Program Counter: Stack:
.PP
(i) ICALL None See Operation STACK ← PC + 1
.PP
SP ← SP \- 2 (2 bytes, 16 bits)
.PP
(ii)ICALL None See Operation STACK ← PC + 1
.PP
SP ← SP \- 3 (3 bytes, 22 bits)
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
1001
T}@T{
.PP
0101
T}@T{
.PP
0000
T}@T{
.PP
1001
T}
.TE
.SS  () Status Register (SREG) and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}
.TE
.PP
Example:
.IP
.nf
\f[C]
mov\ r30,r0\ ;\ Set\ offset\ to\ call\ table
icall\ ;\ Call\ routine\ pointed\ to\ by\ r31:r30
\f[]
.fi
.PP
.PP
Words:1 (2 bytes)
.PP
Cycles:
.PP
.TS
tab(@);
l l l.
T{
T}@T{
.PP
Cycles
T}@T{
.PP
Cycles xmega
T}
_
T{
.PP
Devices with 16\-bit PC
T}@T{
.PP
3
T}@T{
.PP
2
T}
T{
.PP
Devices with 22\-bit PC
T}@T{
.PP
4
T}@T{
.PP
3
T}
.TE
