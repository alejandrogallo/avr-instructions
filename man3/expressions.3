.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "Expressions \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Expressions
.PP
The Assembler incorporates constant expressions.
Expressions can consist of
operands (avrassembler.wb_expressions.html#avrassembler.wb_expressions.Operands)
,
operators (avrassembler.wb_expressions.html#avrassembler.wb_expressions.Operators)
and
functions (avrassembler.wb_expressions.html#avrassembler.wb_expressions.Functions)
.
All expressions are 64 bits internally.
.SS Operands
.PP
The following operands can be used:
.IP \[bu] 2
User defined labels which are given the value of the location counter at
the place they appear.
.IP \[bu] 2
User defined variables defined by the SET directive
.IP \[bu] 2
User defined constants defined by the EQU directive
.IP \[bu] 2
Integer constants: constants can be given in several formats, including
.IP \[bu] 2
.RS 2
.IP \[bu] 2
Decimal (default): 10, 255
.IP \[bu] 2
Hexadecimal (two notations): 0x0a, $0a, 0xff, $ff
.IP \[bu] 2
Binary: 0b00001010, 0b11111111
.IP \[bu] 2
Octal (leading zero): 010, 077
.PP
.RE
.IP \[bu] 2
PC \- the current value of the Program memory location counter
.IP \[bu] 2
Floating point constants
.SS Operators
.PP
The Assembler supports a number of operators which are described here.
The higher the precedence, the higher the priority.
Expressions may be enclosed in parentheses, and such expressions are
always evaluated before combined with anything outside the parentheses.
The associativity of binary operators indicates the evaluation order of
chained operators, left associativity meaning they are evaluated left to
right, i.e., 2 \- 3 \- 4 is (2 \- 3) \- 4, while right associativity
would mean 2\-3\-4 is 2 \- (3 \- 4).
Some operators are not assoiciative, meaning chaining has no meaning.
.PP
The following operators are defined:
.PP
.TS
tab(@);
l l.
T{
 \f[B]Symbol\f[]
T}@T{
 \f[B]Description\f[]
T}
_
T{
.PP
! (avrassembler.wb_expressions.html#avrassembler.Logical_Not)
T}@T{
Logical not (avrassembler.wb_expressions.html#avrassembler.Logical_Not)
T}
T{
.PP
~ (avrassembler.wb_expressions.html#avrassembler.Bitwise_Not)
T}@T{
Bitwise Not (avrassembler.wb_expressions.html#avrassembler.Bitwise_Not)
T}
T{
.PP
\- (avrassembler.wb_expressions.html#avrassembler.Unary_Minus)
T}@T{
Unary Minus (avrassembler.wb_expressions.html#avrassembler.Unary_Minus)
T}
T{
.PP
* (avrassembler.wb_expressions.html#avrassembler.Multiplication)
T}@T{
Multiplication (avrassembler.wb_expressions.html#avrassembler.Multiplication)
T}
T{
.PP
/ (avrassembler.wb_expressions.html#avrassembler.Division)
T}@T{
Division (avrassembler.wb_expressions.html#avrassembler.Division)
T}
T{
.PP
% (avrassembler.wb_expressions.html#avrassembler.Modulo)
T}@T{
Modulo ( AVR Assembler 2
only) (avrassembler.wb_expressions.html#avrassembler.Modulo)
T}
T{
.PP
+ (avrassembler.wb_expressions.html#avrassembler.Addition)
T}@T{
Addition (avrassembler.wb_expressions.html#avrassembler.Addition)
T}
T{
.PP
\- (avrassembler.wb_expressions.html#avrassembler.Subtraction)
T}@T{
Subtraction (avrassembler.wb_expressions.html#avrassembler.Subtraction)
T}
T{
.PP
<< (avrassembler.wb_expressions.html#avrassembler.Shift_left)
T}@T{
Shift left (avrassembler.wb_expressions.html#avrassembler.Shift_left)
T}
T{
.PP
>> (avrassembler.wb_expressions.html#avrassembler.Shift_right)
T}@T{
Shift right (avrassembler.wb_expressions.html#avrassembler.Shift_right)
T}
T{
.PP
< (avrassembler.wb_expressions.html#avrassembler.Less_than)
T}@T{
Less than (avrassembler.wb_expressions.html#avrassembler.Less_than)
T}
T{
.PP
<= (avrassembler.wb_expressions.html#avrassembler.Less_or_Equal)
T}@T{
Less than or
equal (avrassembler.wb_expressions.html#avrassembler.Less_or_Equal)
T}
T{
.PP
> (avrassembler.wb_expressions.html#avrassembler.Greater_than)
T}@T{
Greater
than (avrassembler.wb_expressions.html#avrassembler.Greater_than)
T}
T{
.PP
>= (avrassembler.wb_expressions.html#avrassembler.Greater_or_equal)
T}@T{
Greater than or
equal (avrassembler.wb_expressions.html#avrassembler.Greater_or_equal)
T}
T{
.PP
== (avrassembler.wb_expressions.html#avrassembler.Equal)
T}@T{
Equal (avrassembler.wb_expressions.html#avrassembler.Equal)
T}
T{
.PP
!= (avrassembler.wb_expressions.html#avrassembler.Not_equal)
T}@T{
Not equal (avrassembler.wb_expressions.html#avrassembler.Not_equal)
T}
T{
.PP
& (avrassembler.wb_expressions.html#avrassembler.Bitwise_And)
T}@T{
Bitwise And (avrassembler.wb_expressions.html#avrassembler.Bitwise_And)
T}
T{
.PP
^ (avrassembler.wb_expressions.html#avrassembler.Bitwise_Xor)
T}@T{
.PP
Bitwise Xor (avrassembler.wb_expressions.html#avrassembler.Bitwise_Xor)
T}
T{
.PP
| (avrassembler.wb_expressions.html#avrassembler.Bitwise_Or)
T}@T{
.PP
Bitwise Or (avrassembler.wb_expressions.html#avrassembler.Bitwise_Or)
T}
T{
.PP
&& (avrassembler.wb_expressions.html#avrassembler.Logical_And)
T}@T{
Logical And (avrassembler.wb_expressions.html#avrassembler.Logical_And)
T}
T{
.PP
|| (avrassembler.wb_expressions.html#avrassembler.Logical_Or)
T}@T{
Logical Or (avrassembler.wb_expressions.html#avrassembler.Logical_Or)
T}
T{
.PP
? (avrassembler.wb_expressions.html#avrassembler.wb_expressions.Conditional_operator)
T}@T{
Conditional
operator (avrassembler.wb_expressions.html#avrassembler.wb_expressions.Conditional_operator)
T}
.TE
.SS  () Logical Not
.PP
Symbol: !
.PP
Description: Unary operator which returns 1 if the expression was zero,
and returns 0 if the expression was nonzero Precedence: 12
.PP
Associativity: None
.PP
Example: ldi r16,!0xf0 ; Load r16 with 0x00
.SS  () Bitwise Not
.PP
Symbol: ~
.PP
Description: Unary operator which returns the input expression with all
bits inverted
.PP
Precedence: 12
.PP
Associativity: None
.PP
Example: ldi r16,~0xf0 ; Load r16 with 0x0f
.SS  () Unary Minus
.PP
Symbol: \-
.PP
Description: Unary operator which returns the arithmetic negation of an
expression
.PP
Precedence: 14
.PP
Associativity: None
.PP
Example: ldi r16,\-2 ; Load \-2(0xfe) in r16
.SS  () Multiplication
.PP
Symbol: *
.PP
Description: Binary operator which returns the product of two
expressions
.PP
Precedence: 13
.PP
Associativity: Left
.PP
Example: ldi r30,label*2 ; Load r30 with label*2
.SS  () Division
.PP
Symbol: /
.PP
Description: Binary operator which returns the integer quotient of the
left expression divided by the right expression
.PP
Precedence: 13
.PP
Associativity: Left
.PP
Example: ldi r30,label/2 ; Load r30 with label/2
.SS  () Modulo
.PP
Symbol: %
.PP
Description: Binary operator which returns the integer remainder of the
left expression divided by the right expression
.PP
Precedence: 13
.PP
Associativity: Left
.PP
Example: ldi r30,label%2 ; Load r30 with label%2
.SS  () Addition
.PP
Symbol: +
.PP
Description: Binary operator which returns the sum of two expressions
.PP
Precedence: 12
.PP
Associativity: Left
.PP
Example: ldi r30,c1+c2 ; Load r30 with c1+c2
.SS  () Subtraction
.PP
Symbol: \-
.PP
Description: Binary operator which returns the left expression minus the
right expression
.PP
Precedence: 12
.PP
Associativity: Left
.PP
Example: ldi r17,c1\-c2 ;Load r17 with c1\-c2
.SS  () Shift left
.PP
Symbol: <<
.PP
Description: Binary operator which returns the left expression shifted
left the number given by the right expression
.PP
Precedence: 11
.PP
Associativity: Left
.PP
Example: ldi r17,1<<bitmask ;Load r17 with 1 shifted left bitmask times
.SS  () Shift right
.PP
Symbol: >>
.PP
Description: Binary operator which returns the left expression shifted
right the number given by the right expression
.PP
Precedence: 11
.PP
Associativity: Left
.PP
Example: ldi r17,c1>>c2 ;Load r17 with c1 shifted right c2 times
.SS  () Less than
.PP
Symbol: <
.PP
Description: Binary operator which returns 1 if the signed expression to
the left is Less than the signed expression to the right, 0 otherwise
.PP
Precedence: 10
.PP
Associativity: None
.PP
Example: ori r18,bitmask*(c1<c2)+1 ;Or r18 with an expression
.SS  () Less or equal
.PP
Symbol: <=
.PP
Description: Binary operator which returns 1 if the signed expression to
the left is Less than or Equal to the signed expression to the right, 0
otherwise
.PP
Precedence: 10
.PP
Associativity: None
.PP
Example: ori r18,bitmask*(c1<=c2)+1 ;Or r18 with an expression
.SS  () Greater than
.PP
Symbol: >
.PP
Description: Binary operator which returns 1 if the signed expression to
the left is Greater than the signed expression to the right, 0 otherwise
.PP
Precedence: 10
.PP
Associativity: None
.PP
Example: ori r18,bitmask*(c1>c2)+1 ;Or r18 with an expression
.SS  () Greater or equal
.PP
Symbol: >=
.PP
Description: Binary operator which returns 1 if the signed expression to
the left is Greater than or Equal to the signed expression to the right,
0 otherwise
.PP
Precedence: 10
.PP
Associativity: None
.PP
Example: ori r18,bitmask*(c1>=c2)+1 ;Or r18 with an expression
.SS  () Equal
.PP
Symbol: ==
.PP
Description: Binary operator which returns 1 if the signed expression to
the left is Equal to the signed expression to the right, 0 otherwise
.PP
Precedence: 9
.PP
Associativity: None
.PP
Example: andi r19,bitmask*(c1==c2)+1 ;And r19 with an expression
.SS  () Not equal
.PP
Symbol: !=
.PP
Description: Binary operator which returns 1 if the signed expression to
the left is Not Equal to the signed expression to the right, 0 otherwise
.PP
Precedence: 9
.PP
Associativity: None
.PP
Example: .SET flag=(c1!=c2) ;Set flag to 1 or 0
.SS  () Bitwise And
.PP
Symbol: &
.PP
Description: Binary operator which returns the bitwise And between two
expressions
.PP
Precedence: 8
.PP
Associativity: Left
.PP
Example: ldi r18,High(c1&c2) ;Load r18 with an expression
.SS  () Bitwise Xor
.PP
Symbol: ^
.PP
Description: Binary operator which returns the bitwise Exclusive Or
between two expressions
.PP
Precedence: 7
.PP
Associativity: Left
.PP
Example: ldi r18,Low(c1^c2) ;Load r18 with an expression
.SS  () Bitwise Or
.PP
Symbol: |
.PP
Description: Binary operator which returns the bitwise Or between two
expressions
.PP
Precedence: 6
.PP
Associativity: Left
.PP
Example: ldi r18,Low(c1|c2) ;Load r18 with an expression
.SS  () Logical And
.PP
Symbol: &&
.PP
Description: Binary operator which returns 1 if the expressions are both
nonzero, 0 otherwise
.PP
Precedence: 5
.PP
Associativity: Left
.PP
Example: ldi r18,Low(c1&&c2) ;Load r18 with an expression
.SS  () Logical Or
.PP
Symbol: ||
.PP
Description: Binary operator which returns 1 if one or both of the
expressions are nonzero, 0 otherwise
.PP
Precedence: 4
.PP
Associativity: Left
.PP
Example: ldi r18,Low(c1||c2) ;Load r18 with an expression
.SS Conditional operator
.PP
Symbol: ?
:
.PP
Syntax: condtion?
expression1 : expression2
.PP
Description: Ternary operator which returns expression1 if condition is
true, expression2 otherwise.
.PP
Precedence: 3
.PP
Associativity: None
.PP
Example:
.PP
ldi r18, a > b?
a : b ; Load r18 with the maximum numeric value of a and b.
Note: This feature was introduced in AVRASM 2.1 and is not available in
2.0 or earlier versions.
.SS Functions
.IP \[bu] 2
LOW(expression) returns the low byte of an expression
.IP \[bu] 2
HIGH(expression) returns the second byte of an expression
.IP \[bu] 2
BYTE2(expression) is the same function as HIGH
.IP \[bu] 2
BYTE3(expression) returns the third byte of an expression
.IP \[bu] 2
BYTE4(expression) returns the fourth byte of an expression
.IP \[bu] 2
LWRD(expression) returns bits 0\-15 of an expression
.IP \[bu] 2
HWRD(expression) returns bits 16\-31 of an expression
.IP \[bu] 2
PAGE(expression) returns bits 16\-21 of an expression
.IP \[bu] 2
EXP2(expression) returns 2 to the power of expression
.IP \[bu] 2
LOG2(expression) returns the integer part of log2(expression)
.IP \[bu] 2
INT(expression) Truncates a floating point expression to integer (ie
discards fractional part)
.IP \[bu] 2
FRAC(expression) Extracts fractional part of a floating point expression
(ie discards integer part).
.IP \[bu] 2
Q7(expression) Converts a fractional floating point expression to a form
suitable for the FMUL (avrassembler.wb_FMUL.html) /
FMULS (avrassembler.wb_FMULS.html) /
FMULSU (avrassembler.wb_FMULSU.html) instructions.
(sign + 7\-bit fraction)
.IP \[bu] 2
Q15(expression) Converts a fractional floating point expression to a
form suitable for the FMUL (avrassembler.wb_FMUL.html) /
FMULS (avrassembler.wb_FMULS.html) /
FMULSU (avrassembler.wb_FMULSU.html) instructions.
(sign +15\-bit fraction)
.IP \[bu] 2
ABS() Returns the absolute value of a constant expression.
.IP \[bu] 2
DEFINED(symbol) Returns true if symbolis previously defined using
.equ/.set/.def directives.
Normally used in conjunction with .if directives (.if defined(foo)), but
may be used in any context.
It differs from other functions in that parentheses around its argument
are not required, and that it only makes sense to use a single symbol as
argument.
.IP \[bu] 2
STRLEN(string) returns the length of a string c+onstant, in bytes.
