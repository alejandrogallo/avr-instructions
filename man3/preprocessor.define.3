.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "#define \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler AVR Assembler Preprocessor
.SS #define
.SS  () Syntax:
.IP "1." 3
\f[C]\ \ \ \ \ \ \ \ \ \ #define\ name\ [value]\ \ \ \ \ \ \ \ \ \f[]
.IP "2." 3
\f[C]\ \ \ \ \ \ \ \ \ \ #define\ name(arg,\ ...)\ [value]\ \ \ \ \ \ \ \ \ \f[]
.SS  () Description:
.PP
Define a preprocessor macro.
There are two forms of macros, (1) object\-like macros that basically
define a constant, and (2) function\-like macros that do parameter
substitution.
.PP
value may be any string, it is not evaluated until the macro is expanded
(used).
If value is not specified, it is set to 1.
.PP
Form (1) macros may be defined from the command line, using the
\-D (avrassembler.wb_Command_Line_Options.html#avrassembler.wb_Command_Line_Options.D)
.
.PP
When form (2) is used, the macro must be called with the same number of
arguments it is defined with.
Any occurrences of arg in value will be replaced with the corresponding
arg when the macro is called.
Note that the left parenthesis must appear immediately after name (no
spaces between), otherwise it will be interpreted as part of the value
of a form (1) macro.
.SS  () Examples
.PP
Note that the placement of the first `(' is very significant in the
examples below.
.IP "1." 3
#define EIGHT (1 << 3)
.IP "2." 3
#define SQR(X) ((X)*(X))
