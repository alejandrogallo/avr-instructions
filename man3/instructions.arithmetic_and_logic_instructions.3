.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "Arithmetic and logic instructions \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instruction mnemonics
.SS Arithmetic and logic instructions
.PP
.TS
tab(@);
l l l l l l.
T{
 \f[B]Mnemonic\f[]
T}@T{
 \f[B]Operands\f[]
T}@T{
 \f[B]Description\f[]
T}@T{
 \f[B]Operation\f[]
T}@T{
 \f[B]Flags\f[]
T}@T{
 \f[B]Cycles\f[]
T}
_
T{
.PP
ADD (avrassembler.wb_ADD.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Add without Carry
T}@T{
Rd = Rd + Rr
T}@T{
Z,C,N,V,H,S
T}@T{
1
T}
T{
.PP
ADC (avrassembler.wb_ADC.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Add with Carry
T}@T{
Rd = Rd + Rr + C
T}@T{
Z,C,N,V,H,S
T}@T{
1
T}
T{
.PP
ADIW (avrassembler.wb_ADIW.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
k (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_k)
T}@T{
.PP
Add Immediate To Word
T}@T{
.PP
Rd+1:Rd,K
T}@T{
.PP
Z,C,N,V,S
T}@T{
.PP
2
T}
T{
.PP
SUB (avrassembler.wb_SUB.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
.PP
Subtract without Carry
T}@T{
.PP
Rd = Rd \- Rr
T}@T{
.PP
Z,C,N,V,H,S
T}@T{
.PP
1
T}
T{
.PP
SUBI (avrassembler.wb_SUBI.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
K8 (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_K8)
T}@T{
Subtract Immediate
T}@T{
Rd = Rd \- K8
T}@T{
Z,C,N,V,H,S
T}@T{
1
T}
T{
.PP
SBC (avrassembler.wb_SBC.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Subtract with Carry
T}@T{
Rd = Rd \- Rr \- C
T}@T{
Z,C,N,V,H,S
T}@T{
1
T}
T{
.PP
SBCI (avrassembler.wb_SBCI.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
K8 (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_K8)
T}@T{
Subtract with Carry Immedtiate
T}@T{
Rd = Rd \- K8 \- C
T}@T{
Z,C,N,V,H,S
T}@T{
1
T}
T{
.PP
AND (avrassembler.wb_AND.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Logical AND
T}@T{
Rd = Rd 路 Rr
T}@T{
Z,N,V,S
T}@T{
1
T}
T{
.PP
ANDI (avrassembler.wb_ANDI.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
K8 (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_K8)
T}@T{
Logical AND with Immediate
T}@T{
Rd = Rd 路 K8
T}@T{
Z,N,V,S
T}@T{
1
T}
T{
.PP
OR (avrassembler.wb_OR.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Logical OR
T}@T{
Rd = Rd V Rr
T}@T{
Z,N,V,S
T}@T{
1
T}
T{
.PP
ORI (avrassembler.wb_ORI.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
K8 (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_K8)
T}@T{
Logical OR with Immediate
T}@T{
Rd = Rd V K8
T}@T{
Z,N,V,S
T}@T{
1
T}
T{
.PP
EOR (avrassembler.wb_EOR.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Logical Exclusive OR
T}@T{
Rd = Rd EOR Rr
T}@T{
Z,N,V,S
T}@T{
1
T}
T{
.PP
COM (avrassembler.wb_COM.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
T}@T{
One's Complement
T}@T{
Rd = $FF \- Rd
T}@T{
Z,C,N,V,S
T}@T{
1
T}
T{
.PP
NEG (avrassembler.wb_NEG.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
T}@T{
Two's Complement
T}@T{
Rd = $00 \- Rd
T}@T{
Z,C,N,V,H,S
T}@T{
1
T}
T{
.PP
CBR (avrassembler.wb_CBR.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
K8 (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_K8)
T}@T{
Set Bit(s) in Register
T}@T{
Rd = Rd V K8
T}@T{
Z,C,N,V,S
T}@T{
1
T}
T{
.PP
CBR (avrassembler.wb_CBR.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
K8 (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_K8)
T}@T{
Clear Bit(s) in Register
T}@T{
Rd = Rd 路 ($FF \- K8)
T}@T{
Z,C,N,V,S
T}@T{
1
T}
T{
.PP
INC (avrassembler.wb_INC.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
T}@T{
Increment Register
T}@T{
Rd = Rd + 1
T}@T{
Z,N,V,S
T}@T{
1
T}
T{
.PP
DEC (avrassembler.wb_DEC.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
T}@T{
Decrement Register
T}@T{
Rd = Rd \-1
T}@T{
Z,N,V,S
T}@T{
1
T}
T{
.PP
TST (avrassembler.wb_TST.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
T}@T{
Test for Zero or Negative
T}@T{
Rd = Rd 路 Rd
T}@T{
Z,C,N,V,S
T}@T{
1
T}
T{
.PP
CLR (avrassembler.wb_CLR.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
T}@T{
Clear Register
T}@T{
Rd = 0
T}@T{
Z,N,V,S
T}@T{
1
T}
T{
.PP
SER (avrassembler.wb_SER.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
T}@T{
Set Register
T}@T{
Rd = $FF
T}@T{
None
T}@T{
1
T}
T{
.PP
SBIW (avrassembler.wb_SBIW.html)
T}@T{
.PP
Rdl (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rdl)
,
K6 (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_K6)
T}@T{
Subtract Immediate from Word
T}@T{
Rdh:Rdl = Rdh:Rdl \- K 6
T}@T{
Z,C,N,V,S
T}@T{
2
T}
T{
.PP
MUL (avrassembler.wb_MUL.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Multiply Unsigned
T}@T{
R1:R0 = Rd * Rr
T}@T{
Z,C
T}@T{
2
T}
T{
.PP
MULS (avrassembler.wb_MULS.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Multiply Signed
T}@T{
R1:R0 = Rd * Rr
T}@T{
Z,C
T}@T{
2
T}
T{
.PP
MULSU (avrassembler.wb_MULSU.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Multiply Signed with Unsigned
T}@T{
R1:R0 = Rd * Rr
T}@T{
Z,C
T}@T{
2
T}
T{
.PP
FMUL (avrassembler.wb_FMUL.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Fractional Multiply Unsigned
T}@T{
R1:R0 = (Rd * Rr) << 1
T}@T{
Z,C
T}@T{
2
T}
T{
.PP
FMULS (avrassembler.wb_FMULS.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Fractional Multiply Signed
T}@T{
R1:R0 = (Rd *Rr) << 1
T}@T{
Z,C
T}@T{
2
T}
T{
.PP
FMULSU (avrassembler.wb_FMULSU.html)
T}@T{
.PP
Rd (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rd)
,
Rr (avrassembler.wb_instructions.Bit_and_Bit-test_Instructions.html#avrassembler.wb_Rr)
T}@T{
Fractional Multiply Signed with Unsigned
T}@T{
R1:R0 = (Rd * Rr) << 1
T}@T{
Z,C
T}@T{
2
T}
.TE
