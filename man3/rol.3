.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "ROL\- Rotate Left trough Carry \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS ROL \- Rotate Left trough Carry
.SS  () Description:
.PP
Shifts all bits in Rd one place to the left.
The C flag is shifted into bit 0 of Rd.
Bit 7 is shifted into the C flag.
This operation, combined with LSL (avrassembler.wb_LSL.html) ,
effectively multiplies multi\-byte signed and unsigned values by two.
.PP
Operation:
.PP
.TS
tab(@);
l l l l l.
T{
.PP
C
T}@T{
.PP
¨
T}@T{
.PP
b7\[em]\[em]\[em]\[em]\[em]\[em]b0
T}@T{
.PP
←
T}@T{
.PP
C
T}
.TE
.PP
Syntax: Operands: Program Counter:
.PP
(i)ROL Rd 0 ≤ d ≤ 31 PC ← PC + 1
.PP
16\-bit Opcode: (see ADC Rd,Rd)
.PP
.TS
tab(@);
l l l l.
T{
.PP
0001
T}@T{
.PP
11dd
T}@T{
.PP
dddd
T}@T{
.PP
dddd
T}
.TE
.SS  () Status Register (SREG) and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}
.TE
.PP
H: Rd3
.PP
S: N ⊕ V, For signed tests.
.PP
V: N ⊕ C (For N and C after the shift)
.PP
N:R7
.PP
Set if MSB of the result is set; cleared otherwise.
.PP
Z:
$\\overline{R7} \\overline{R6} \\overline{R5} \\overline{R4}$
.PP
$\\overline{R3} \\overline{R2} \\overline{R1} \\overline{R0}$
.PP
.PP
Set if the result is $00; cleared otherwise.
.PP
C:Rd7
.PP
Set if, before the shift, the MSB of Rd was set; cleared otherwise.
.PP
R (Result) equals Rd after the operation.
.PP
Example:
.IP
.nf
\f[C]
lsl\ r18\ ;\ Multiply\ r19:r18\ by\ two
rol\ r19\ ;\ r19:r18\ is\ a\ signed\ or\ unsigned\ two\-byte\ integer
\ brcsoneenc\ ;\ Branch\ if\ carry\ set
\&...
oneenc:nop\ ;\ Branch\ destination\ (do\ nothing)
\f[]
.fi
.PP
.PP
Words: 1 (2 bytes)
.PP
Cycles: 1
