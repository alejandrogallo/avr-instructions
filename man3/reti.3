.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "RETI \- Return from Interrupt \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS RETI \- Return from Interrupt
.SS  () Description:
.PP
Returns from interrupt.
The return address is loaded from the
Stack (avrassembler.wb_registers.html#avrassembler.Stack) and the global
interrupt flag is set.
.PP
Note that the status register is not automatically stored when entering
an interrupt routine, and it is not restored when returning from an
interrupt routine.
This must be handled by the application program.
The stack pointer uses a pre\-increment scheme during RETI.
.PP
Operation:
.PP
(i)PC(15:0) ← STACKDevices with 16 bits PC, 128K bytes program memory
maximum.
.PP
(ii)PC(21:0) ← STACKDevices with 22 bits PC, 8M bytes program memory
maximum.
.PP
Syntax: Operands: Program Counter: Stack
.PP
(i) RETI None See Operation SP ← SP + 2 (2 bytes, 16 bits)
.PP
(ii) RETI None See Operation SP ← SP + 3 (3 bytes, 22 bits)
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
1001
T}@T{
.PP
0101
T}@T{
.PP
0001
T}@T{
.PP
1000
T}
.TE
.SS  () Status Register (SREG) and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
1
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}
.TE
.PP
I: 1
.PP
The I flag is set.
.PP
Example:
.IP
.nf
\f[C]
\&...
\ extint:\ push\ r0\ ;\ Save\ r0\ on\ the\ stack
\&...
pop\ r0\ ;\ Restore\ r0
reti\ ;\ Return\ and\ enable\ interrupts
\f[]
.fi
.PP
.PP
Words: 1 (2 bytes)
.PP
Cycles: 4 devices with 16\-bit PC
.PP
5 devices with 22\-bit PC
