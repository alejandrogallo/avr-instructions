.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "ASR \- Arithmetic Shift Right \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS ASR \- Arithmetic Shift Right
.SS  () Description:
.PP
Shifts all bits in Rd one place to the right.
Bit 7 is held constant.
Bit 0 is loaded into the C flag of the SREG.
This operation effectively divides a signed value by two without
changing its sign.
The carry flag can be used to round the result.
.PP
Operation:
.PP
(i)
.PP
Syntax: Operands: ProgramCounter:
.PP
(i)ASR R d0 ≤ d ≤ 31 PC ← PC + 1
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
1001
T}@T{
.PP
010d
T}@T{
.PP
dddd
T}@T{
.PP
0101
T}
.TE
.SS  () Status Register (SREG) and BooleanFormulae:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}
.TE
.PP
S: N ⊕ V,
.PP
For signed tests.
.PP
V:N ⊕ C
.PP
(For N and C after the shift)
.PP
N:R7
.PP
Set if MSB of the result is set; cleared otherwise.
.PP
Z:
$\\overline{R7} \\overline{R6} \\overline{R5} \\overline{R4}$
.PP
$\\overline{R3} \\overline{R2} \\overline{R1} \\overline{R0}$
.PP
.PP
Set if the result is $00; cleared otherwise.
.PP
C:Rd0
.PP
Set if, before the shift, the LSB of Rd was set; cleared otherwise.
.PP
R (Result) equals Rd after the operation.
.PP
Example:
.IP
.nf
\f[C]
\ \ \ \ \ \ ldi\ 16,$10\ ;\ Load\ decimal\ 16\ into\ r16
\ \ \ \ \ \ asr\ r16;\ r16=r16\ /\ 2
\ \ \ \ \ \ ldi\ r17,$FC\ ;\ Load\ \-4\ in\ r17
\ \ \ \ \ \ asr\ r17;\ r17=r17/2
\ \ \ \ \ \ 
\f[]
.fi
.PP
.PP
Words: 1 (2 bytes)
.PP
Cycles: 1
