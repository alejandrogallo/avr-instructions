.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "EIJMP \- Extended Indirect Jump \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS EIJMP \- Extended Indirect Jump
.SS  () Description:
.PP
Indirect jump to the address pointed to by the Z (16 bits) pointer
register in the register file and the EIND register in the I/O space.
This instruction allows for indirect jumps to the entire program memory
space.
.PP
This instruction is not available in all devices.
Refer to the device specific instruction set summary.
.PP
Operation:
.PP
PC(15:0) ← Z(15:0)
.PP
PC(21:16) ← EIND
.PP
Syntax: Operands: Program Counter: Stack:
.PP
EIJMP None See Operation Not Affected
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
1001
T}@T{
.PP
0100
T}@T{
.PP
0001
T}@T{
.PP
1001
T}
.TE
.SS  () Status Register (SREG) and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}
.TE
.PP
Example:
.IP
.nf
\f[C]
ldi\ r16,\ $05\ ;\ Set\ up\ EIND\ and\ Z\ pointer
out\ EIND,\ r16
ldi\ r30,\ $00
ldi\ r31,\ $10
eijmp\ ;\ Jump\ to\ $051000
\f[]
.fi
.PP
.PP
Words: 1 (2 bytes)
.PP
Cycles: 2
