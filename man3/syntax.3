.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "AVR Assembler Syntax \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler AVR Assembler Syntax
.IP \[bu] 2
Keywords (avrassembler.wb_Syntax.html#avrassembler.wb_Syntax.Keywords)
.IP \[bu] 2
Preprocessor (avrassembler.wb_Syntax.html#avrassembler.wb_Syntax.Preprocessor_directives)
.IP \[bu] 2
Comments (avrassembler.wb_Syntax.html#avrassembler.wb_Syntax.Comments)
.IP \[bu] 2
Line (avrassembler.wb_Syntax.html#avrassembler.wb_Syntax.Line_continuation)
.IP \[bu] 2
Strings and character
constants (avrassembler.wb_Syntax.html#avrassembler.wb_Syntax.Strings_and_character_constants)
.IP \[bu] 2
Multiple (avrassembler.wb_Syntax.html#avrassembler.wb_Syntax.Multiple_instructions_per_line)
.IP \[bu] 2
Operands (avrassembler.wb_Syntax.html#avrassembler.wb_Syntax.Operands)
.SS Keywords
.PP
Predefined identifiers (keywords) are reserved and cannot be redefined.
The keywords include all Instruction
mnemonics (avrassembler.wb_instructions.html) ,
Functions (avrassembler.wb_expressions.html#avrassembler.wb_expressions.Functions)
.
.PP
Assembler keywords are recognized regardless of case, unless the
\-c (avrassembler.wb_Command_Line_Options.html#avrassembler.wb_Command_Line_Options.c)
option is used, in which case the keywords are lower case (i.e.,
\[lq]add\[rq] is reserved, \[lq]ADD\[rq] is not).
.SS Preprocessor directives
.PP
AVRASM2 considers all lines starting with a `#' as the first non\-space
character a preprocessor directive (avrassembler.wb_directives.html) .
.SS Comments
.PP
In addition to the classic assembler comments starting with `;', AVRASM2
recognizes C\-style comments.
The following comment styles are recognized:
.IP
.nf
\f[C]
;\ The\ rest\ of\ the\ line\ is\ a\ comment\ (classic\ assembler\ comment)
//\ Like\ \[aq];\[aq],\ the\ rest\ of\ the\ line\ is\ a\ comment
/*\ Block\ comment;\ the\ enclosed\ text\ is\ a\ comment,\ may\ span\ 
multiple\ lines.This\ style\ of\ comments\ cannot\ be\ nested.\ */
\f[]
.fi
.SS Line continuation
.PP
Like in C, source lines can be continued by means of having a backslash
(\\) as the last character of a line.
This is particularly useful when defining long preprocessor macros, and
for long \f[C]\ \ \ \ \ \ \ .db\ \ \ \ \ \ \f[] directives.
 \f[B]\f[]
.PP
 \f[B]Example:\f[]
.IP
.nf
\f[C]
\&.db\ 0,\ 1,\ "This\ is\ a\ long\ string",\ \[aq]\\n\[aq],\ 0,\ 2,\ \\\ 
"Here\ is\ another\ one",\ \[aq]\\n\[aq],\ 0,\ 3,\ 0
\f[]
.fi
.SS Integer constants
.PP
AVRASM2 allows underscores (_) to be used as separators for increased
readability.
Underscores may be located anywhere in the number except as the first
character or inside the radix specifier.
.PP
 \f[B]Example:\f[] \f[C]\ \ \ \ \ \ \ 0b1100_1010\ \ \ \ \ \ \f[] and
\f[C]\ \ \ \ \ \ \ 0b_11_00_10_10_\ \ \ \ \ \ \f[] are both legal, while
\f[C]\ \ \ \ \ \ \ _0b11001010\ \ \ \ \ \ \f[] and
\f[C]\ \ \ \ \ \ \ 0_b11001010\ \ \ \ \ \ \f[] are not.
.SS Strings and character constants
.PP
A string enclosed in double quotes (") can only be used in conjunction
with the
DB (avrassembler.wb_directives.html#avrassembler.wb_directives.DB)
directive and the
MESSAGE (avrassembler.wb_directives.html#avrassembler.wb_directives.MESSAGE)
/.
WARNING (avrassembler.wb_directives.html#avrassembler.wb_directives.WARNING)
/
ERROR (avrassembler.wb_directives.html#avrassembler.wb_directives.ERROR)
directives.
The string is taken literally, no escape sequences are recognized, and
it is not NULL\-terminated.
.PP
Quoted strings may be concatenated according to the ANSI C convention,
i.e., \f[C]\ \ \ \ \ \ \ "This\ is\ a\ "\ "long\ string"\ \ \ \ \ \ \f[]
is equivalent to
\f[C]\ \ \ \ \ \ \ "This\ \ \ is\ a\ long\ string"\ \ \ \ \ \ \f[] .This
may be combined with
Line (avrassembler.wb_Syntax.html#avrassembler.wb_Syntax.Line_continuation)
to form long strings spanning multiple source lines.
.PP
Character constants are enclosed in single quotes ('), and can be used
anywhere an integer expression is allowed.
The following C\-style escape sequences are recognized, with the same
meaning as in C:
.PP
.TS
tab(@);
l l.
T{
.PP
Escape sequence
T}@T{
.PP
Meaning
T}
_
T{
.PP
\\n
T}@T{
.PP
Newline (ASCII LF 0x0a)
T}
T{
.PP
\\r
T}@T{
.PP
Carriage return (ASCII CR 0x0d)
T}
T{
.PP
\\a
T}@T{
.PP
Alert bell (ASCII BEL 0x07)
T}
T{
.PP
\\b
T}@T{
.PP
Backspace (ASCII BS 0x08)
T}
T{
.PP
\\f
T}@T{
.PP
Form feed (ASCII FF 0x0c)
T}
T{
.PP
\\t
T}@T{
.PP
Horizontal tab (ASCII HT 0x09)
T}
T{
.PP
\\v
T}@T{
.PP
Vertical tab (ASCII VT 0x0b)
T}
T{
.PP
\\\\
T}@T{
.PP
Backslash
T}
T{
.PP
\\0
T}@T{
.PP
Null character (ASCII NUL)
T}
.TE
.PP
\\ooo (ooo = octal number) and \\xhh (hh = hex number) are also
recognized.
.SS  () Examples
.IP
.nf
\f[C]
\&.db\ "Hello\\n"\ //\ is\ equivalent\ to:
\&.db\ \[aq]H\[aq],\ \[aq]e\[aq],\ \[aq]l\[aq],\ \[aq]l\[aq],\ \[aq]o\[aq],\ \[aq]\\\\\[aq],\ \[aq]n\[aq]
\&.db\ \[aq]\\0\[aq],\ \[aq]\\177\[aq],\ \[aq]\\xff\[aq]
\f[]
.fi
.PP
To create the equivalent to the C\-string \[lq]Hello, world\\n\[rq], do
as follows:
.IP
.nf
\f[C]
\&.db\ "Hello,\ world",\ \[aq]\\n\[aq],\ 0
\f[]
.fi
.SS Multiple instructions per line
.PP
AVRASM2 allows multiple instructions and directives per line, but its
use is not recommended.
It is needed to support expansion of multiline preprocessor macros.
.SS Operands
.PP
AVRASM2 has support for integer
operands (avrassembler.wb_expressions.html#avrassembler.wb_expressions.Operands)
and limited support for floating point constant expressions.
All operands are described
Operands (avrassembler.wb_expressions.html#avrassembler.wb_expressions.Operands)
.
