.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "RCALL \- Relative Call to Subroutine \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS RCALL \- Relative Call to Subroutine
.SS  () Description:
.PP
Relative call to an address within PC \- 2K + 1 and PC + 2K (words).
The return address (the instruction after the RCALL) is stored onto the
stack.
(See also CALL (avrassembler.wb_CALL.html) ).
In the assembler, labels are used instead of relative operands.
For AVR microcontrollers with program memory not exceeding 4K words (8K
bytes) this instruction can address the entire memory from every address
location.
The stack pointer uses a post\-decrement scheme during RCALL.
.PP
Operation:
.PP
(i)PC ← PC + k + 1 Devices with 16 bits PC, 128K bytes program memory
maximum.
.PP
(ii)PC ← PC + k + 1 Devices with 22 bits PC, 8M bytes program memory
maximum.
.PP
Syntax: Operands: Program Counter: Stack:
.PP
(i) RCALL k \-2K ≤ k < 2K PC ← PC + k + 1 STACK ← PC + 1
.PP
SP ← SP \- 2 (2 bytes, 16 bits)
.PP
(ii)RCALL k \-2K ≤ k < 2K PC ← PC + k + 1 STACK ← PC + 1
.PP
SP ← SP \- 3 (3 bytes, 22 bits)
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
1101
T}@T{
.PP
kkkk
T}@T{
.PP
kkkk
T}@T{
.PP
kkkk
T}
.TE
.SS  () Status Register (SREG) and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}
.TE
.PP
Example:
.IP
.nf
\f[C]
rcall\ routine\ ;\ Call\ subroutine
\&...
\ routine:\ push\ r14\ ;\ Save\ r14\ on\ the\ stack
\&...
pop\ r14\ ;\ Restore\ r14
ret\ ;\ Return\ from\ subroutine
\f[]
.fi
.PP
.PP
Words:1 (2 bytes)
.PP
Cycles:
.PP
.TS
tab(@);
l l l l.
T{
T}@T{
.PP
Cycles
T}@T{
.PP
Cycles xmega
T}@T{
.PP
Cycles AVR8L
T}
_
T{
.PP
Devices with 16\-bit PC
T}@T{
.PP
3
T}@T{
.PP
2
T}@T{
.PP
4
T}
T{
.PP
Devices with 22\-bit PC
T}@T{
.PP
4
T}@T{
.PP
3
T}@T{
.PP
N/A
T}
.TE
