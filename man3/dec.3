.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "DEC\- Decrement \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS DEC \- Decrement
.SS  () Description:
.PP
Subtracts one \-1\- from the contents of register Rd and places the
result in the destination register Rd.
.PP
The C flag in SREG is not affected by the operation, thus allowing the
DEC instruction to be used on a loop counter in multiple\-precision
computations.
.PP
When operating on unsigned values, only BREQ (avrassembler.wb_BREQ.html)
and BRNE (avrassembler.wb_BRNE.html) branches can be expected to perform
consistently.
When operating on two's complement values, all signed branches are
available.
.PP
Operation:
.PP
Rd ← Rd \- 1
.PP
Syntax: Operands: Program Counter:
.PP
DEC Rd 0 ≤ d ≤ 31 PC ← PC + 1
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
1001
T}@T{
.PP
010d
T}@T{
.PP
dddd
T}@T{
.PP
1010
T}
.TE
.SS  () Status Register and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
\-
T}
.TE
.PP
S:N ⊕ V
.PP
For signed tests.
.PP
V:
$\\overline{R7} {R6} {R5} {R4}$
.PP
\f[I]R\f[]3\f[I]R\f[]2\f[I]R\f[]1\f[I]R\f[]0
.PP
.PP
Set if two's complement overflow resulted from the operation; cleared
otherwise.
Two's complement overflow occurs if and only if Rd was $80 before the
operation.
.PP
N:R7
.PP
Set if MSB of the result is set; cleared otherwise.
.PP
Z:
$\\overline{R7} \\overline{R6} \\overline{R5} \\overline{R4}$
.PP
$\\overline{R3} \\overline{R2} \\overline{R1} \\overline{R0}$
.PP
.PP
Set if the result is $00; Cleared otherwise.
.PP
R (Result) equals Rd after the operation.
.PP
Example:
.IP
.nf
\f[C]
ldi\ r17,\ $10\ ;\ Load\ constant\ in\ r17
loop:\ add\ r1,\ r2\ ;\ Add\ r2\ to\ r1
dec\ r17\ ;\ Decrement\ r17
brne\ loop\ ;\ Branch\ if\ r17⇔0
nop;\ Continue\ (do\ nothing)
\f[]
.fi
.PP
.PP
Words: 1 (2 bytes)
.PP
Cycles: 1
