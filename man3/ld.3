.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "LD \- Load Indirect from data space to Register using Index X \- \- AVR
Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS LD \- Load Indirect from data space to Register using Index X
.SS Description:
.PP
Loads one byte indirect from the data space to a register.
For parts with SRAM, the data space consists of the register file, I/O
memory and internal SRAM (and external SRAM if applicable).
For parts without SRAM, the data space consists of the register file
only.
The EEPROM has a separate address space.
.PP
The data location is pointed to by the X (16 bits) pointer register in
the register file.
Memory access is limited to the current data segment of 64K bytes.
To access another data segment in devices with more than 64K bytes data
space, the RAMPX, RAMPY,
RAMPZ (avrassembler.wb_registers.html#avrassembler.RAMPX__RAMPY__RAMPZ)
in register in the I/O area has to be changed.
.PP
The X pointer register can either be left unchanged by the operation, or
it can be post\-incremented or pre\-decremented.
These features are especially suited for accessing arrays, tables, and
stack pointer usage of the X pointer register.
Note that only the low byte of the X pointer is updated in devices with
no more than 256 bytes data space.
For such devices, the high byte of the pointer is not used by this
instruction and can be used for other purposes.
The RAMPX register in the I/O area is updated in parts with more than
64K bytes data space or more than 64K bytes program memory, and the
increment/decrement is added to the entire 24\-bit address on such
devices.
.PP
Not all variants of this instruction is available in all devices.
Refer to the device specific instruction set summary.
.PP
The result of these combinations is undefined:
.PP
LD r26, X+
.PP
LD r27, X+
.PP
LD r26, \-X
.PP
LD r27, \-X
.PP
Using the X pointer:
.PP
Operation: Comment:
.PP
(i)Rd ← (X) X: Unchanged
.PP
(ii)Rd ← (X) X ← X + 1 X: Post incremented
.PP
(iii)X ← X \- 1 Rd ← (X) X: Pre decremented
.PP
Syntax: Operands: Program Counter:
.PP
(i) LD Rd, X 0 ≤ d ≤ 31 PC ← PC + 1
.PP
(ii)LD Rd, X+ 0 ≤ d ≤ 31 PC ← PC + 1
.PP
(iii)LD Rd, \-X 0 ≤ d ≤ 31 PC ← PC + 1
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l l.
T{
.PP
(i)
T}@T{
.PP
1001
T}@T{
.PP
000d
T}@T{
.PP
dddd
T}@T{
.PP
1100
T}
_
T{
.PP
(ii)
T}@T{
.PP
1001
T}@T{
.PP
000d
T}@T{
.PP
dddd
T}@T{
.PP
1101
T}
T{
.PP
(iii)
T}@T{
.PP
1001
T}@T{
.PP
000d
T}@T{
.PP
dddd
T}@T{
.PP
1110
T}
.TE
.SS Status Register (SREG) and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}
.TE
.PP
Example:
.IP
.nf
\f[C]
clr\ r27\ ;\ Clear\ X\ high\ byte
ldi\ r26,$60\ ;\ Set\ X\ low\ byte\ to\ $60
ld\ r0,X+\ ;\ Load\ r0\ with\ data\ space\ loc.\ $60(X\ post\ inc)
ld\ r1,X\ ;\ Load\ r1\ with\ data\ space\ loc.\ $61
ldi\ r26,$63\ ;\ Set\ X\ low\ byte\ to\ $63
ld\ r2,X\ ;\ Load\ r2\ with\ data\ space\ loc.\ $63
ld\ r3,\-X\ ;\ Load\ r3\ with\ data\ space\ loc.\ $62(X\ pre\ dec)
\f[]
.fi
.PP
.PP
Words:1 (2 bytes)
.PP
Cycles:
.PP
.TS
tab(@);
l l l l.
T{
T}@T{
.PP
Cycles
T}@T{
.PP
Cycles xmega
T}@T{
.PP
Cycles AVR8L
T}
_
T{
.PP
(i)
T}@T{
.PP
2
T}@T{
.PP
1/2*
T}@T{
.PP
1/2**
T}
T{
.PP
(ii)
T}@T{
.PP
2
T}@T{
.PP
1/2*
T}@T{
.PP
1/2**
T}
T{
.PP
(iii)
T}@T{
.PP
2
T}@T{
.PP
2/3*
T}@T{
.PP
2/3**
T}
.TE
.PP
(*) When accessing internal SRAM, one extra cycle is required (**) When
accessing FLASH, one extra cycle is required.
