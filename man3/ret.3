.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "RET \- Return from Subroutine \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS RET \- Return from Subroutine
.SS  () Description:
.PP
Returns from subroutine.
The return address is loaded from the
Stack (avrassembler.wb_registers.html#avrassembler.Stack) .
The stack pointer uses a pre\-increment scheme during RET.
.PP
Operation:
.PP
(i)PC(15:0) ← STACK Devices with 16 bits PC, 128K bytes program memory
maximum.
.PP
(ii)PC(21:0) ← STACK Devices with 22 bits PC, 8M bytes program memory
maximum.
.PP
Syntax: Operands: Program Counter: Stack:
.PP
(i) RET None See Operation SP←SP + 2, (2bytes,16 bits)
.PP
(ii) RET None See Operation SP←SP + 3, (3bytes,22 bits)
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
1001
T}@T{
.PP
0101
T}@T{
.PP
0000
T}@T{
.PP
1000
T}
.TE
.SS  () Status Register (SREG) and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}
.TE
.PP
Example:
.IP
.nf
\f[C]
\ callroutine\ ;\ Call\ subroutine
\&...
\ routine:\ push\ r14\ ;\ Save\ r14\ on\ the\ stack
\&...
pop\ r14\ ;\ Restore\ r14
ret\ ;\ Return\ from\ subroutine
\f[]
.fi
.PP
.PP
Words: 1 (2 bytes)
.PP
Cycles: 4 devices with 16\-bit PC
.PP
5 devices with 22\-bit PC
