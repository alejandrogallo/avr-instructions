.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.PP
\f[B]Table of Contents\f[]
 ADC \- Add with Carry (avrassembler.wb_ADC.html)
 ADD \- Add without Carry (avrassembler.wb_ADD.html)
 ADIW \- Add Immediate to Word (avrassembler.wb_ADIW.html)
 AND \- Logical AND (avrassembler.wb_AND.html)
 ANDI \- Logical AND with Immediateand (avrassembler.wb_ANDI.html)
 ASR \- Arithmetic Shift Right (avrassembler.wb_ASR.html)
 BCLR \- Bit Clear in SREG (avrassembler.wb_BCLR.html)
 BLD \- Bit Load from the T Flag in SREG to a Bit in
Register. (avrassembler.wb_BLD.html)
 BRBC \- Branch if Bit in SREG is Cleared (avrassembler.wb_BRBC.html)
 BRBS \- Branch if Bit in SREG is Set (avrassembler.wb_BRBS.html)
 BRCC \- Branch if Carry Cleared (avrassembler.wb_BRCC.html)
 BRCS \- Branch if Carry Set (avrassembler.wb_BRCS.html)
 BREAK \- Break (avrassembler.wb_BREAK.html)
 BREQ \- Branch if Equal (avrassembler.wb_BREQ.html)
 BRGE \- Branch if Greater or Equal Signed) (avrassembler.wb_BRGE.html)
 BRHC \- Branch if Half Carry Flag is
Cleared (avrassembler.wb_BRHC.html)
 BRHS \- Branch if Half Carry Flag is Set (avrassembler.wb_BRHS.html)
 BRID \- Branch if Global Interrupt is
Disabled (avrassembler.wb_BRID.html)
 BRIE \- Branch if Global Interrupt is
Enabled (avrassembler.wb_BRIE.html)
 BRLO \- Branch if Lower (Unsigned) (avrassembler.wb_BRLO.html)
 BRLT \- Branch if Less Than (Signed) (avrassembler.wb_BRLT.html)
 BRMI \- Branch if Minus (avrassembler.wb_BRMI.html)
 BRNE \- Branch if Not Equal (avrassembler.wb_BRNE.html)
 BRPL \- Branch if Plus (avrassembler.wb_BRPL.html)
 BRSH \- Branch if Same or Higher (Unsigned) (avrassembler.wb_BRSH.html)
 BRTC \- if the T Flag is Cleared (avrassembler.wb_BRTC.html)
 BRTS \- Branch if the T Flag is Set (avrassembler.wb_BRTS.html)
 BRVC \- Branch if Overflow Cleared (avrassembler.wb_BRVC.html)
 BRVS \- Branch if Overflow Set (avrassembler.wb_BRVS.html)
 BSET \- Bit Set in SREG (avrassembler.wb_BSET.html)
 BST \- Bit Store from Bit in Register to T Flag in
SREG (avrassembler.wb_BST.html)
 CALL \- Long Call to a Subroutine (avrassembler.wb_CALL.html)
 CBI \- Clear Bit in I/O Register (avrassembler.wb_CBI.html)
 CBR \- Clear Bits in Register (avrassembler.wb_CBR.html)
 CLC \- Clear Carry Flag (avrassembler.wb_CLC.html)
 CLH \- Clear Half Carry Flag (avrassembler.wb_CLH.html)
 CLI \- Clear Global Interrupt Flag (avrassembler.wb_CLI.html)
 CLN \- Clear Negative Flag (avrassembler.wb_CLN.html)
 CLR \- Clear Register (avrassembler.wb_CLR.html)
 CLS \- Clear Signed Flag (avrassembler.wb_CLS.html)
 CLT \- Clear T Flag (avrassembler.wb_CLT.html)
 CLV \- Clear Overflow Flag (avrassembler.wb_CLV.html)
 CLZ \- Clear Zero Flag (avrassembler.wb_CLZ.html)
 COM\- One's Complement (avrassembler.wb_COM.html)
 CP\- Compare (avrassembler.wb_CP.html)
 CPC\- Compare with Carry (avrassembler.wb_CPC.html)
 CPI\- Compare with Immediate (avrassembler.wb_CPI.html)
 CPSE\- Compare Skip if Equal (avrassembler.wb_CPSE.html)
 DEC\- Decrement (avrassembler.wb_DEC.html)
 EICALL \- Extended Indirect Call to
Subroutine (avrassembler.wb_EICALL.html)
 EIJMP \- Extended Indirect Jump (avrassembler.wb_EIJMP.html)
 ELPM \- Extended Load Program Memory (avrassembler.wb_ELPM.html)
 EOR \- Exclusive OR (avrassembler.wb_EOR.html)
 FMUL\- Fractional Multiply Unsigned (avrassembler.wb_FMUL.html)
 FMULS \- Fractional Multiply Signed (avrassembler.wb_FMULS.html)
 FMULSU \- Fractional Multiply Signed with
Unsigned (avrassembler.wb_FMULSU.html)
 ICALL \- Indirect Call to Subroutine (avrassembler.wb_ICALL.html)
 IJMP \- Indirect Jump (avrassembler.wb_IJMP.html)
 IN \- Load an I/O Location to Register (avrassembler.wb_IN.html)
 INC\- Increment (avrassembler.wb_INC.html)
 JMP \- Jump (avrassembler.wb_JMP.html)
 LD \- Load Indirect from data space to Register using Index
X (avrassembler.wb_LD.html)
 LAT \- Load and Toggle (avrassembler.wb_LAT.html)
 LAS \- Load and Set (avrassembler.wb_LAS.html)
 LAC \- Load and Clear (avrassembler.wb_LAC.html)
 LD (LDD)\- Load Indirect from data space to Register using Index
Y (avrassembler.wb_LDD.html)
 LD (LDD) \- Load Indirect From data space to Register using Index
Z (avrassembler.wb_LDD_Z.html)
 LDI \- Load Immediate (avrassembler.wb_LDI.html)
 LDS \- Load Direct from data space (avrassembler.wb_LDS.html)
 LDS \- Load Direct from
SRAM (avrassembler.wb_LDS_-_Load_direct_from_SRAM.html)
 LPM \- Load Program Memory (avrassembler.wb_LPM.html)
 LSL\- Logical Shift Left (avrassembler.wb_LSL.html)
 LSR\- Logical Shift Right (avrassembler.wb_LSR.html)
 MOV \- Copy Register (avrassembler.wb_MOV.html)
 MOVW \- Copy Register Word (avrassembler.wb_MOVW.html)
 MUL\- Multiply Unsigned (avrassembler.wb_MUL.html)
 MULS \- Multiply Signed (avrassembler.wb_MULS.html)
 MULSU \- Multiply Signed with Unsigned (avrassembler.wb_MULSU.html)
 NEG\- Two's Complement (avrassembler.wb_NEG.html)
 NOP \- No Operation (avrassembler.wb_NOP.html)
 OR\- Logical OR (avrassembler.wb_OR.html)
 ORI\- Logical OR with Immediate (avrassembler.wb_ORI.html)
 OUT \- Store Register to I/O Location (avrassembler.wb_OUT.html)
 POP \- Pop Register from Stack (avrassembler.wb_POP.html)
 PUSH \- Push Register on Stack (avrassembler.wb_PUSH.html)
 RCALL \- Relative Call to Subroutine (avrassembler.wb_RCALL.html)
 RET \- Return from Subroutine (avrassembler.wb_RET.html)
 RETI \- Return from Interrupt (avrassembler.wb_RETI.html)
 RJMP\- Relative Jump (avrassembler.wb_RJMP.html)
 ROL\- Rotate Left trough Carry (avrassembler.wb_ROL.html)
 ROR\- Rotate Right through Carry (avrassembler.wb_ROR.html)
 SBC\- Subtract with Carry (avrassembler.wb_SBC.html)
 SBCI\- Subtract Immediate with Carry (avrassembler.wb_SBCI.html)
 SBI \- Set Bit in I/O Register (avrassembler.wb_SBI.html)
 SBIC \- Skip if Bit in I/O Register is
Cleared (avrassembler.wb_SBIC.html)
 SBIS \- Skip if Bit in I/O Register is Set (avrassembler.wb_SBIS.html)
 SBIW \- Subtract Immediate from Word (avrassembler.wb_SBIW.html)
 SBR\- Set Bits in Register (avrassembler.wb_SBR.html)
 SBRC \- Skip if Bit in Register is Cleared (avrassembler.wb_SBRC.html)
 SBRS \- Skip if Bit in Register is Set (avrassembler.wb_SBRS.html)
 SEC \- Set Carry Flag (avrassembler.wb_SEC.html)
 SEH \- Set Half Carry Flag (avrassembler.wb_SEH.html)
 SEI \- Set Global Interrupt Flag (avrassembler.wb_SEI.html)
 SEN \- Set Negative Flag (avrassembler.wb_SEN.html)
 SER \- Set all bits in Register (avrassembler.wb_SER.html)
 SES \- Set Signed Flag (avrassembler.wb_SES.html)
 SET \- Set T Flag (avrassembler.wb_SET.html)
 SEV \- Overflow Flag (avrassembler.wb_SEV.html)
 SEZ \- Set Zero Flag (avrassembler.wb_SEZ.html)
 SLEEP\- Sleep mode (avrassembler.wb_SLEEP.html)
 SPM \- Store Program Memory (avrassembler.wb_SPM.html)
 ST \- Store Indirect From Register to data space using Index
X (avrassembler.wb_ST.html)
 ST (STD) \- Store Indirect From Register to data space using Index
Y (avrassembler.wb_STD.html)
 ST (STD) \- Store Indirect From Register to data space using Index
Z (avrassembler.wb_STD_Z.html)
 STS \- Store Direct to data space (avrassembler.wb_STS.html)
 STS \- Store Direct to
SRAM (avrassembler.wb_STS_-_Store_Direct_to_SRAM.html)
 SUB\- Subtract without Carry (avrassembler.wb_SUB.html)
 SUBI\- Subtract Immediate (avrassembler.wb_SUBI.html)
 SWAP \- Swap Nibbles (avrassembler.wb_SWAP.html)
 TST\- Test for Zero or Minus (avrassembler.wb_TST.html)
 WDR \- Watchdog Reset (avrassembler.wb_WDR.html)
 XCH \- Exchange (avrassembler.wb_XCH.html)
