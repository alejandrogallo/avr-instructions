.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "SBCI\- Subtract Immediate with Carry \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS SBCI \- Subtract Immediate with Carry
.SS  () Description:
.PP
Subtracts a constant from a register and subtracts with the C flag and
places the result in the destination register Rd.
.PP
Operation:
.PP
(i)Rd ← Rd \- K \- C
.PP
Syntax: Operands: Program Counter:
.PP
(i) SBCI Rd,K 16 ≤ d ≤ 31, 0 ≤ K ≤ 255 PC ← PC + 1
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
0100
T}@T{
.PP
KKKK
T}@T{
.PP
dddd
T}@T{
.PP
KKKK
T}
.TE
.SS  () Status Register and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}
.TE
.PP
$\\overline{Rd3} {Rr3} + {Rr3} {R3}+{R3} \\overline{Rd3}$
.PP
.PP
Set if there was a borrow from bit 3; cleared otherwise
.PP
S: N ⊕ V, For signed tests.
.PP
V:
${Rd7}{Rd7} \\overline{Rr7} \\overline{R7} + \\overline{Rd7} {Rr7} {R7}$
.PP
.PP
Set if two's complement overflow resulted from the operation; cleared
otherwise.
.PP
N: R7
.PP
Set if MSB of the result is set; cleared otherwise.
.PP
Z:
$\\overline{R7} \\overline{R6} \\overline{R5} \\overline{R4}$
.PP
$\\overline{R3} \\overline{R2} \\overline{R1} \\overline{R0} Z$
.PP
Z
.PP
Previous value remains unchanged when the result is zero; cleared
otherwise.
.PP
C:
$\\overline{Rd7} {Rr7} + {Rr7} {R7} + {R7} \\overline{Rd7}$
.PP
.PP
Set if the absolute value of the constant plus previous carry is larger
than the absolute value of Rd; cleared otherwise.
.PP
R (Result) equals Rd after the operation.
.PP
Example:
.IP
.nf
\f[C]
;\ Subtract\ $4F23\ from\ r17:r16
subi\ r16,$23\ ;\ Subtract\ low\ byte
sbci\ r17,$4F\ ;\ Subtract\ with\ carry\ high\ byte
\f[]
.fi
.PP
.PP
Words: 1 (2 bytes)
.PP
Cycles: 1
