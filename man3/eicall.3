.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "EICALL \- Extended Indirect Call to Subroutine \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS EICALL \- Extended Indirect Call to Subroutine
.SS  () Description:
.PP
Indirect call of a subroutine pointed to by the Z (16 bits) pointer
register in the register file and the EIND register in the I/O space.
This instruction allows for indirect calls to the entire program memory
space.
The stack pointer uses a post\-decrement scheme during EICALL.
.PP
This instruction is not implemented for devices with 2 bytes PC, see
ICALL (avrassembler.wb_ICALL.html) .
Refer to the device specific instruction set summary.
.PP
Operation:
.PP
PC(15:0) ← Z(15:0)
.PP
PC(21:16) ← EIND
.PP
Syntax: Operands: Program Counter: Stack:
.PP
EICALL None See Operation STACK ← PC + 1
.PP
SP \-< SP \- 3 (3 bytes, 22 bits)
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
1001
T}@T{
.PP
0101
T}@T{
.PP
0001
T}@T{
.PP
1001
T}
.TE
.SS  () Status Register (SREG) and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}
.TE
.PP
Example:
.IP
.nf
\f[C]
ldi\ r16,$05\ ;\ Set\ up\ EIND\ and\ Z\ pointer
out\ EIND,r16
ldi\ 30,\ $00
ldi\ r31,\ $10
eicall\ ;\ Call\ to\ $051000
\f[]
.fi
.PP
.PP
Words: 1 (2 bytes)
.PP
Cycles:
.PP
.TS
tab(@);
l l l.
T{
T}@T{
.PP
Cycles
T}@T{
.PP
Cycles xmega
T}
_
T{
.PP
Only implemented in devices with 22\-bit PC
T}@T{
.PP
4
T}@T{
.PP
3
T}
.TE
