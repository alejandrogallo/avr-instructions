.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "LSR\- Logical Shift Right \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS LSR \- Logical Shift Right
.SS Description:
.PP
Shifts all bits in Rd one place to the right.
Bit 7 is cleared.
Bit 0 is loaded into the C flag of the
SREG (avrassembler.wb_nomenclature.html#avrassembler.Status_Register) .
This operation effectively divides an unsigned value by two.
The C flag can be used to round the result.
.PP
Operation:
.PP
.TS
tab(@);
l l l l l.
T{
.PP
0
T}@T{
.PP
→
T}@T{
.PP
b7\[em]\[em]\[em]\[em]\[em]\[em]b0
T}@T{
.PP
→
T}@T{
.PP
C
T}
.TE
.PP
Syntax: Operands: Program Counter:
.PP
(i) LSR Rd 0 ≤ d ≤ 31 PC ← PC + 1
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
1001
T}@T{
.PP
010d
T}@T{
.PP
dddd
T}@T{
.PP
0110
T}
.TE
.SS Status Register (SREG) and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
0
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}
.TE
.PP
S: N ⊕ V, For signed tests.
.PP
V: N ⊕ C (For N and C after the shift)
.PP
N: 0
.PP
Z:
$\\overline{R7} \\overline{R6} \\overline{R5} \\overline{R4}$
.PP
$\\overline{R3} \\overline{R2} \\overline{R1} \\overline{R0}$
.PP
.PP
Set if the result is $00; cleared otherwise.
.PP
C: Rd0
.PP
Set if, before the shift, the LSB of Rd was set; cleared otherwise.
.PP
R (Result) equals Rd after the operation.
.PP
Example:
.IP
.nf
\f[C]
add\ r0,r4\ ;\ Add\ r4\ to\ r0
lsr\ r0\ ;\ Divide\ r0\ by\ 2
\f[]
.fi
.PP
.PP
Words: 1 (2 bytes)
.PP
Cycles: 1
