.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "RJMP\- Relative Jump \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS RJMP \- Relative Jump
.SS  () Description:
.PP
Relative jump to an address within PC \- 2K +1 and PC + 2K (words).
In the assembler, labels are used instead of relative operands.
For AVR microcontrollers with program memory not exceeding 4K words (8K
bytes) this instruction can address the entire memory from every address
location.
.PP
Operation:
.PP
(i)PC ← PC + k + 1
.PP
Syntax: Operands: Program Counter: Stack
.PP
(i) RJMP k \-2K ≤ k < 2K PC ← PC + k + 1 Unchanged
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
1100
T}@T{
.PP
kkkk
T}@T{
.PP
kkkk
T}@T{
.PP
kkkk
T}
.TE
.SS  () Status Register (SREG) and Boolean Formula:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
\-
T}
.TE
.PP
Example:
.IP
.nf
\f[C]
cpi\ r16,$42\ ;\ Compare\ r16\ to\ $42
brne\ error\ ;\ Branch\ if\ r16\ ⇔\ $42
rjmpok\ ;\ Unconditional\ branch
error:\ addr16,r17\ ;\ Add\ r17\ to\ r16
incr16\ ;\ Increment\ r16
ok:\ nop\ ;\ Destination\ for\ rjmp\ (do\ nothing)
\f[]
.fi
.PP
.PP
Words: 1 (2 bytes)
.PP
Cycles: 2
