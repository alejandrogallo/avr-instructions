.\"t
.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "ADC \- Add with Carry \- \- AVR Assembler" "" "" "" ""
.hy
.SH AVR Assembler Instructions
.SS ADC \- Add with Carry
.SS  () Description:
.SS  () Adds two registers and the contents of the C flag and places the
result in the destination register Rd.
.PP
Operation:
.PP
(i)Rd ← Rd + Rr + C
.PP
Syntax: Operands: Program Counter:
.PP
(i)ADC Rd, Rr0 ≤ d ≤ 31, 0 ≤ r ≤ 31, PC ← PC + 1
.PP
16\-bit Opcode:
.PP
.TS
tab(@);
l l l l.
T{
.PP
0001
T}@T{
.PP
11rd
T}@T{
.PP
dddd
T}@T{
.PP
rrrr
T}
.TE
.SS  () Status Register (SREG) Boolean Formulae:
.PP
.TS
tab(@);
l l l l l l l l.
T{
.PP
I
T}@T{
.PP
T
T}@T{
.PP
H
T}@T{
.PP
S
T}@T{
.PP
V
T}@T{
.PP
N
T}@T{
.PP
Z
T}@T{
.PP
C
T}
_
T{
.PP
\-
T}@T{
.PP
\-
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}@T{
.PP
⇔
T}
.TE
.PP
H:
${Rd3} {Rr3} + {Rr3} \\overline{R3}+\\overline{R3} {Rd3}$
.PP
Set if there was a carry from bit 3; cleared otherwise
.PP
S: N ⊕ V For signed tests.
.PP
V:
${Rd7}{Rd7} {Rr7} \\overline{R7} + \\overline{Rd7} \\overline{Rr7} {R7}$
.PP
Set if two's complement overflow resulted from the operation; cleared
otherwise.
.PP
N: R7 Set if MSB of the result is set; cleared otherwise.
.PP
Z:
$\\overline{R7} \\overline{R6} \\overline{R5} \\overline{R4}$
.PP
$\\overline{R3} \\overline{R2} \\overline{R1} \\overline{R0}$
.PP
Set if the result is $00; cleared otherwise.
.PP
C:
${Rd7} {Rr7} + {Rr7} \\overline{R7} + \\overline{R7} {Rd7}$
.PP
Set if there was carry from the MSB of the result; cleared otherwise.
.PP
R (Result) equals Rd after the operation.
.PP
Example:
.IP
.nf
\f[C]
\ \ ;\ Add\ R1:R0\ to\ R3:R2
\ \ add\ r2,r0\ ;\ Add\ low\ byte
\ \ adc\ r3,r1\ ;\ Add\ with\ carry\ high\ byte
\ \ 
\f[]
.fi
.PP
.PP
Words: 1 (2 bytes)
.PP
Cycles: 1
