*preprocessor.error.txt*  AVR Assembler AVR Assembler Preprocessor

===============================================================================
Contents ~

 1. Introduction                              |preprocessor.error-introduction|
 2. #error, #warning and #message    |preprocessor.error-error-warning-message|
  1. Syntax                                         |preprocessor.error-syntax|
  2. Description                               |preprocessor.error-description|
  3. Example                                       |preprocessor.error-example|

===============================================================================
                                              *preprocessor.error-introduction*
Introduction ~

===============================================================================
                                     *preprocessor.error-error-warning-message*
#error, #warning and #message ~

-------------------------------------------------------------------------------
                                                    *preprocessor.error-syntax*
Syntax ~

'#error tokens'

'#warning tokens'

'#message tokens'

-------------------------------------------------------------------------------
                                               *preprocessor.error-description*
Description ~

'#error' emits tokens to standard error, and increments the assembler error
counter, hereby preventing the program from being successfully assembled.
'#error' is specified in the ANSI C standard.

'#warning' emits tokens to standard error, and increments the assembler warning
counter. '#warning' is not specified in the ANSI C standard, but is commonly
implemented in preprocessors such as the GNU C preprocessor.

'#message' emits tokens to standard output, and does not affect assembler error
or warning counters. '#message' is not specified in the ANSI C standard.

For all directives, the output will include file name and line number, like
normal error and warning messages.

tokens is a sequence of preprocessor tokens. Preprocessor macros are expanded
except if appearing inside quoted strings '(")' .

-------------------------------------------------------------------------------
                                                   *preprocessor.error-example*
Example ~

'#error "Unsupported part:" __PART_NAME__'

vim: ft=help
