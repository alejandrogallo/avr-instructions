*st.txt*  AVR Assembler Instructions

===============================================================================
Contents ~

 1. Introduction                                              |st-introduction|
 2. ST - Store Indirect From Register to data space using Index X |st-store-indirect-from-register-to-data-space-using-index-x|
  1. Description:                                              |st-description|
  2. Status Register (SREG) and Boolean Formula: |status-register-boolean-formula|
 3. References                                                  |st-references|

===============================================================================
                                                              *st-introduction*
Introduction ~

===============================================================================
                  *st-store-indirect-from-register-to-data-space-using-index-x*
ST - Store Indirect From Register to data space using Index X ~

-------------------------------------------------------------------------------
                                                               *st-description*
Description: ~

Stores one byte indirect from a register to data space. For parts with SRAM,
the data space consists of the register file, I/O memory and internal SRAM (and
external SRAM if applicable). For parts without SRAM, the data space consists
of the register file only. The EEPROM has a separate address space.

The data location is pointed to by the X (16 bits) pointer register in the
register file. Memory access is limited to the current data segment of 64K
bytes. To access another data segment in devices with more than 64K bytes data
space, the RAMPX, RAMPY, RAMPZ [1] in register in the I/O area has to be
changed.

The X pointer register can either be left unchanged by the operation, or it can
be post-incremented or pre-decremented. These features are especially suited
for accessing arrays, tables, and stack pointer usage of the X pointer
register. Note that only the low byte of the X pointer is updated in devices
with no more than 256 bytes data space. For such devices, the high byte of the
pointer is not used by this instruction and can be used for other purposes. The
RAMPX register in the I/O area is updated in parts with more than 64K bytes
data space or more than 64K bytes program memory, and the increment/ decrement
is added to the entire 24-bit address on such devices.

Not all variants of this instruction is available in all devices. Refer to the
device specific instruction set summary.

The result of these combinations is undefined:

ST X+, r26

ST X+, r27

ST -X, r26

ST -X, r27

Using the X pointer:

Operation: Comment:

(i)(X) ← Rr X: Unchanged

(ii)(X) ← Rr X ← X+1 X: Post incremented

(iii)X ← X - 1 (X) ← Rr X: Pre decremented

Syntax: Operands: Program Counter:

(i)ST X, Rr 0 ≤ r ≤ 31 PC ← PC + 1

(ii)ST X+, Rr 0 ≤ r ≤ 31 PC ← PC + 1

(iii)ST -X, Rr 0 ≤ r ≤ 31 PC ← PC + 1

16-bit Opcode :
>
  | (i)   | 1001 | 001r | rrrr | 1100 |
  |-------|------|------|------|------|
  | (ii)  | 1001 | 001r | rrrr | 1101 |
  | (iii) | 1001 | 001r | rrrr | 1110 |
<
-------------------------------------------------------------------------------
                                              *status-register-boolean-formula*
Status Register (SREG) and Boolean Formula: ~
>
  | I   | T   | H   | S   | V   | N   | Z   | C   |
  |-----|-----|-----|-----|-----|-----|-----|-----|
  | -   | -   | -   | -   | -   | -   | -   | -   |
<
Example:
>
  clr r27 ; Clear X high byte
  ldi r26,$60 ; Set X low byte to $60
  st X+,r0 ; Store r0 in data space loc. $60(X post inc)
  st X,r1 ; Store r1 in data space loc. $61
  ldi r26,$63 ; Set X low byte to $63
  st X,r2 ; Store r2 in data space loc. $63
  st -X,r3 ; Store r3 in data space loc. $62(X pre dec)
<
Words:1 (2 bytes)

Cycles:

``` | | Cycles | Cycles xmega | Cycles AVR8L |
|-------|--------|--------------|--------------| | (i) | 2 | 1 | 1 | | (ii) | 2
| 1 | 1 | | (iii) | 2 | 2 | 2 |

===============================================================================
                                                                *st-references*
References ~

[1] avrassembler.wb_registers.html#avrassembler.RAMPX__RAMPY__RAMPZ

vim: ft=help
