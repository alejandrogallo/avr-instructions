*sts_-_store_direct_to_sram.txt*  AVR Assembler Instructions

===============================================================================
Contents ~

 1. Introduction                      |sts_-_store_direct_to_sram-introduction|
 2. STS - Store Direct to SRAM |sts_-_store_direct_to_sram-sts-store-direct-to-sram|
  1. Status Register (SREG) and Boolean Formula: |sts_-_store_direct_to_sram-status-register-boolean-formula|
 3. References                          |sts_-_store_direct_to_sram-references|

===============================================================================
                                      *sts_-_store_direct_to_sram-introduction*
Introduction ~

===============================================================================
                          *sts_-_store_direct_to_sram-sts-store-direct-to-sram*
STS - Store Direct to SRAM ~

This 1-word form of the STS instruction is only used on ATtiny10-based devices.
Other AVR devices use the STS [1] .

Stores one byte from a register to the SRAM section of the data space.

An 8-bit address in the range 0x40 <= k <= 0xBF must be supplied. The assembler
will calculate an 7-bit offset into the SRAM memory from this address, hence
this instruction is capable of addressing up to 128 bytes of SRAM. This
instruction cannot be used to store I/O addresses, use the OUT [2] instruction
for this purpose.

Operation:

(i)(k) <- Rr

Syntax: Operands: Program Counter:

(i)STS k, Rr 16 ≤ r ≤ 31, 0x40 ≤ k ≤ 0xBF PC <- PC + 1

16-bit Opcode:
>
  |      |      |      |      |
  |------|------|------|------|
  | 1010 | 1kkk | rrrr | kkkk |
<
-------------------------------------------------------------------------------
                   *sts_-_store_direct_to_sram-status-register-boolean-formula*
Status Register (SREG) and Boolean Formula: ~
>
  | I   | T   | H   | S   | V   | N   | Z   | C   |
  |-----|-----|-----|-----|-----|-----|-----|-----|
  | -   | -   | -   | -   | -   | -   | -   | -   |
<
Example:
>
  lds r2,$40 ; Load r2 with the contents of data space location $FF00
  add r2,r1 ; add r1 to r2
  sts $40,r2 ; Write back
<
Words:1 (2 bytes)

Cycles:1

===============================================================================
                                        *sts_-_store_direct_to_sram-references*
References ~

[1] avrassembler.wb_STS.html
[2] avrassembler.wb_OUT.html

vim: ft=help
