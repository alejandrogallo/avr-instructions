*and.txt*  AVR Assembler Instructions

===============================================================================
Contents ~

 1. Introduction                                             |and-introduction|
 2. AND - Logical AND                                             |and-logical|
  1. Description:                                             |and-description|
  2. Status Register (SREG) and Boolean Formulae: |and-status-register-boolean-formulae|

===============================================================================
                                                             *and-introduction*
Introduction ~

===============================================================================
                                                                  *and-logical*
AND - Logical AND ~

-------------------------------------------------------------------------------
                                                              *and-description*
Description: ~

Performs the logical AND between the contents of register Rd and register Rr
and places the result in the destination register Rd.

Operation:

(i)Rd ← Rd • Rr

Syntax: Operands: Program Counter:

(i)AND Rd,Rr 0 ≤ d ≤ 31, 0 ≤ r ≤ 31, PC ← PC + 1

16-bit Opcode:
>
  |      |      |      |      |
  |------|------|------|------|
  | 0010 | 00rd | dddd | rrrr |
<
-------------------------------------------------------------------------------
                                         *and-status-register-boolean-formulae*
Status Register (SREG) and Boolean Formulae: ~
>
  | I   | T   | H   | S   | V   | N   | Z   | C   |
  |-----|-----|-----|-----|-----|-----|-----|-----|
  | -   | -   | -   | ⇔   | 0   | ⇔   | ⇔   | -   |
<
S: N ⊕ V, For signed tests.

V: 0

Cleared

N: R7

Set if MSB of the result is set; cleared otherwise.

Z:

$\overline{R7} \overline{R6} \overline{R5} \overline{R4}$

$\overline{R3} \overline{R2} \overline{R1} \overline{R0}$

Set if the result is $00; cleared otherwise.

R (Result) equals Rd after the operation.

Example:
>
  and r2,r3 ; Bitwise and r2 and r3, result in r2
  ldi r16,1 ; Set bitmask 0000 0001 in r16
  and r2, r16 ; Isolate bit 0 in r2
<
Words: 1 (2 bytes)

Cycles: 1

vim: ft=help
