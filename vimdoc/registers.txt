*registers.txt*  AVR Assembler Instruction mnemonics

===============================================================================
Contents ~

 1. Introduction                                       |registers-introduction|
 2. I/O Registers                                               |i-o-registers|
  1. RAMPX, RAMPY, RAMPZ                          |registers-rampx-rampy-rampz|
  2. RAMPD                                                    |registers-rampd|
  3. EIND                                                      |registers-eind|
  4. Stack                                                    |registers-stack|
  5. Flags                                                    |registers-flags|

===============================================================================
                                                       *registers-introduction*
Introduction ~

===============================================================================
                                                                *i-o-registers*
I/O Registers ~

-------------------------------------------------------------------------------
                                                  *registers-rampx-rampy-rampz*
RAMPX, RAMPY, RAMPZ ~

Registers concatenated with the X, Y and Z registers enabling indirect
addressing of the whole data space on MCUs with more than 64K bytes data space,
and constant data fetch on MCUs with more than 64K bytes program space.

-------------------------------------------------------------------------------
                                                              *registers-rampd*
RAMPD ~

Register concatenated with the Z register enabling direct addressing of the
whole data space on MCUs with more than 64K bytes data space.

-------------------------------------------------------------------------------
                                                               *registers-eind*
EIND ~

Register concatenated with the instruction word enabling indirect jump and call
to the whole program space on MCUs with more than 128K bytes program space.

-------------------------------------------------------------------------------
                                                              *registers-stack*
Stack ~

STACK:Stack for return address and pushed registers

SP:Stack Pointer to STACK

-------------------------------------------------------------------------------
                                                              *registers-flags*
Flags ~

<> :Flag affected by instruction

0 :Flag cleared by instruction

1 :Flag set by instruction

- :Flag not affected by instruction

vim: ft=help
